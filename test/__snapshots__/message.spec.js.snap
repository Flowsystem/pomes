// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Message future skip translation of future plural messages 1`] = `
<I18nProvider
  dispatch={null}
  fallbackLang={null}
  initialLang="en"
  initialized={true}
  lang="pt"
  legacy={false}
  translations={
    Object {
      "en": Object {
        "You have one message": "You have one message",
        "You have {count} messages": "You have {count} messages",
      },
      "pt": Object {
        "You have one message": "Você tem uma mensagem",
        "You have {count} messages": "Você tem {count} mensagens",
      },
    }
  }
  useReducer={false}
>
  <Message
    comment="Foo"
    context={null}
    future={true}
    id="You have one message"
    pluralCondition="count"
    pluralId="You have {count} messages"
    values={
      Object {
        "count": 2,
        "name": "foo",
      }
    }
  >
    You have 2 messages
  </Message>
</I18nProvider>
`;

exports[`Message future skip translation of future singular messages 1`] = `
<I18nProvider
  dispatch={null}
  fallbackLang={null}
  initialLang="en"
  initialized={true}
  lang="pt"
  legacy={false}
  translations={
    Object {
      "en": Object {
        "Hello": "Hello",
      },
      "pt": Object {
        "Hello": "Olá",
      },
    }
  }
  useReducer={false}
>
  <Message
    comment="Foo"
    context={null}
    future={true}
    id="Hello {name}"
    pluralCondition={null}
    pluralId={null}
    values={
      Object {
        "name": "foo",
      }
    }
  >
    Hello foo
  </Message>
</I18nProvider>
`;

exports[`Message plural translate plural messages 1`] = `
<I18nProvider
  dispatch={null}
  fallbackLang={null}
  initialLang="en"
  initialized={true}
  lang="pt"
  legacy={false}
  translations={
    Object {
      "pt": Object {
        "You have one message": "Você tem uma mensagem",
        "You have {count} messages": "Você tem {count} mensagens",
      },
    }
  }
  useReducer={false}
>
  <Message
    comment="Foo"
    context={null}
    future={false}
    id="You have one message"
    pluralCondition="count"
    pluralId="You have {count} messages"
    values={
      Object {
        "count": 2,
        "name": "foo",
      }
    }
  >
    Você tem 2 mensagens
  </Message>
</I18nProvider>
`;

exports[`Message plural translate singular form of plural messages 1`] = `
<I18nProvider
  dispatch={null}
  fallbackLang={null}
  initialLang="en"
  initialized={true}
  lang="pt"
  legacy={false}
  translations={
    Object {
      "pt": Object {
        "You have one message": "Você tem uma mensagem",
        "You have {count} messages": "Você tem {count} mensagens",
      },
    }
  }
  useReducer={false}
>
  <Message
    comment="Foo"
    context={null}
    future={false}
    id="You have one message"
    pluralCondition="count"
    pluralId="You have {count} messages"
    values={
      Object {
        "count": 1,
        "name": "foo",
      }
    }
  >
    Você tem uma mensagem
  </Message>
</I18nProvider>
`;

exports[`Message render 1`] = `
<I18nProvider
  dispatch={null}
  fallbackLang={null}
  initialLang="en"
  initialized={true}
  lang="en"
  legacy={false}
  translations={Object {}}
  useReducer={false}
>
  <Message
    comment="Foo"
    context={null}
    future={false}
    id="Hello {name}"
    pluralCondition={null}
    pluralId={null}
    values={
      Object {
        "name": "foo",
      }
    }
  >
    Hello foo
  </Message>
</I18nProvider>
`;

exports[`Message with a custom component it accepts a custom component and variables 1`] = `
<I18nProvider
  dispatch={null}
  fallbackLang={null}
  initialLang="en"
  initialized={true}
  lang="pt"
  legacy={false}
  translations={
    Object {
      "en": Object {
        "Hello {name} {jsx-start}Doe{jsx-end}": "Olá {name} {jsx-start}Doe{jsx-end}",
      },
      "pt": Object {
        "Hello {name} {jsx-start}Doe{jsx-end}": "Olá {name} {jsx-start}Doe{jsx-end}",
      },
    }
  }
  useReducer={false}
>
  <Message
    className="CustomClassName"
    comment="Foo"
    component={[Function]}
    context={null}
    foo="bar"
    future={false}
    id="Hello {name} {jsx-start}Doe{jsx-end}"
    pluralCondition={null}
    pluralId={null}
    values={
      Object {
        "name": "John",
      }
    }
  >
    <span>
      Olá 
      John
       
      <CustomComponent
        className="CustomClassName"
        context={null}
        foo="bar"
      >
        <div>
          Doe
        </div>
      </CustomComponent>
    </span>
  </Message>
</I18nProvider>
`;

exports[`Message with a custom component it accepts a custom component and wrapped variables 1`] = `
<I18nProvider
  dispatch={null}
  fallbackLang={null}
  initialLang="en"
  initialized={true}
  lang="pt"
  legacy={false}
  translations={
    Object {
      "en": Object {
        "Hello {jsx-start}{name}{jsx-end}": "Olá {jsx-start}{name}{jsx-end}",
      },
      "pt": Object {
        "Hello {jsx-start}{name}{jsx-end}": "Olá {jsx-start}{name}{jsx-end}",
      },
    }
  }
  useReducer={false}
>
  <Message
    className="CustomClassName"
    comment="Foo"
    component={[Function]}
    context={null}
    foo="bar"
    future={false}
    id="Hello {jsx-start}{name}{jsx-end}"
    pluralCondition={null}
    pluralId={null}
    values={
      Object {
        "name": "Joe",
      }
    }
  >
    <span>
      Olá 
      <CustomComponent
        className="CustomClassName"
        context={null}
        foo="bar"
      >
        <div>
          Joe
        </div>
      </CustomComponent>
    </span>
  </Message>
</I18nProvider>
`;

exports[`Message with a custom component wraps the text with the custom component 1`] = `
<I18nProvider
  dispatch={null}
  fallbackLang={null}
  initialLang="en"
  initialized={true}
  lang="pt"
  legacy={false}
  translations={
    Object {
      "en": Object {
        "Hello {jsx-start}Joe{jsx-end}": "Olá {jsx-start}Joe{jsx-end}",
      },
      "pt": Object {
        "Hello {jsx-start}Joe{jsx-end}": "Olá {jsx-start}Joe{jsx-end}",
      },
    }
  }
  useReducer={false}
>
  <Message
    className="CustomClassName"
    comment="Foo"
    component={[Function]}
    context={null}
    foo="bar"
    future={false}
    id="Hello {jsx-start}Joe{jsx-end}"
    pluralCondition={null}
    pluralId={null}
    values={Object {}}
  >
    <span>
      Olá 
      <CustomComponent
        className="CustomClassName"
        context={null}
        foo="bar"
      >
        <div>
          Joe
        </div>
      </CustomComponent>
    </span>
  </Message>
</I18nProvider>
`;
